extension Decodable {
    static func parse(jsonFile: String) throws -> Self {
        let decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase

        guard let url = Bundle.main.url(forResource: jsonFile, withExtension: "json")
        else {
            throw NSError(domain: "JSONReaderErrorDomain", code: 1, userInfo: [NSLocalizedDescriptionKey: "Could not find JSON file with filename \(jsonFile)."])
        }
        let data = try Data(contentsOf: url)
        return try decoder.decode(Self.self, from: data)
    }

    static func parse(jsonString: String) throws -> Self {
        let decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase

        guard let data = jsonString.data(using: .utf8) else {
            throw NSError(domain: "JSONReaderErrorDomain", code: 2, userInfo: [NSLocalizedDescriptionKey: "Unable to convert to data."])
        }
        return try decoder.decode(Self.self, from: data)
    }
}

struct Person: Decodable {
    let name: String
    let age: Int
}

let apJson = """
    {
    "name": "aanchal",
    "age": 26
    }
"""

do {
    let response = try Person.parse(jsonString: apJson)
} catch let error {
    print(error.localizedDescription)
}

