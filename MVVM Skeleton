protocol HomeDisplayLogic: AnyObject {}
// MARK: - ViewController
final class HomeViewController: UIViewController, HomeDisplayLogic {

    private let viewModel: HomeBusinessLogic

    init() {
        let viewModel = HomeViewModel(service: HomeService())
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
        viewModel.view = self
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
    }
}

protocol HomeBusinessLogic: AnyObject {}
// MARK: - ViewModel
final class HomeViewModel: HomeBusinessLogic {

    weak var view: HomeDisplayLogic?
    private let service: HomeServiceProtocol

    init(service: HomeServiceProtocol) {
        self.service = service
    }

}

protocol HomeServiceProtocol: AnyObject {}
// MARK: - Worker
final class HomeService: HomeServiceProtocol {}
