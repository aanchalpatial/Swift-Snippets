protocol HomeDisplayLogic: AnyObject {}
// MARK: - ViewController
final class HomeViewController: UIViewController, HomeDisplayLogic {

    private let interactor: HomeBusinessLogic
    private let router: HomeRoutingLogic

    init() {
        let interactor = HomeInteractor(service: HomeService())
        self.interactor = interactor
        let router = HomeRouter()
        self.router = router
        super.init(nibName: nil, bundle: nil)
        let presenter = HomePresenter()
        interactor.presenter = presenter
        presenter.view = self
        router.viewController = self
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
    }
}

protocol HomeRoutingLogic: AnyObject {}
// MARK: - Router
final class HomeRouter: HomeRoutingLogic {
    weak var viewController: HomeViewController?
}

protocol HomeBusinessLogic: AnyObject {}
// MARK: - Interactor
final class HomeInteractor: HomeBusinessLogic {

    var presenter: HomePresentationLogic?
    private let service: HomeServiceProtocol

    init(service: HomeServiceProtocol) {
        self.service = service
    }
}

protocol HomeServiceProtocol: AnyObject {}
// MARK: - Worker
final class HomeService: HomeServiceProtocol {}

protocol HomePresentationLogic: AnyObject {}
// MARK: - Presenter
final class HomePresenter: HomePresentationLogic {

    weak var view: HomeDisplayLogic?
}
